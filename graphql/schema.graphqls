scalar Time

type Account {
    id: String!
    name: String!
    email: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    description: String!
    price: Float!
    accountId: String!
}

type Order {
    id: String!
    createdAt: Time!
    totalPrice: Float!
    products: [OrderedProduct!]!
}

type OrderedProduct {
    id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
}

type AuthResponse {
    token: String!
}

input PaginationInput {
    skip: Int!
    take: Int!
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

input CreateProductInput {
    name: String!
    description: String!
    price: Float!
}

input UpdateProductInput {
    id: String!
    name: String!
    description: String!
    price: Float!
}

input OrderedProductInput {
    id: String!
    quantity: Int!
}

input OrderInput {
    products: [OrderedProductInput]!
}

type Mutation {
    Register(input: RegisterInput!): AuthResponse
    Login(input: LoginInput!): AuthResponse
    createProduct(product: CreateProductInput!): Product
    updateProduct(product: UpdateProductInput!): Product
    deleteProduct(id: String!): Boolean
    createOrder(order: OrderInput!): Order
}

type Query{
    accounts(pagination: PaginationInput, id: String): [Account!]!
    product(pagination: PaginationInput, query: String, id: String): [Product!]!
}