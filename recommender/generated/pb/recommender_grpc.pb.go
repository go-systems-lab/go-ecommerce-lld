// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: recommender.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommenderService_GetRecommendationsForUserId_FullMethodName = "/pb.RecommenderService/GetRecommendationsForUserId"
	RecommenderService_GetRecommendationsOnViews_FullMethodName   = "/pb.RecommenderService/GetRecommendationsOnViews"
	RecommenderService_RecordInteraction_FullMethodName           = "/pb.RecommenderService/RecordInteraction"
)

// RecommenderServiceClient is the client API for RecommenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommenderServiceClient interface {
	GetRecommendationsForUserId(ctx context.Context, in *RecommendationRequestForUserId, opts ...grpc.CallOption) (*RecommendationResponse, error)
	GetRecommendationsOnViews(ctx context.Context, in *RecommendationRequestOnViews, opts ...grpc.CallOption) (*RecommendationResponse, error)
	RecordInteraction(ctx context.Context, in *ProductInteraction, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type recommenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommenderServiceClient(cc grpc.ClientConnInterface) RecommenderServiceClient {
	return &recommenderServiceClient{cc}
}

func (c *recommenderServiceClient) GetRecommendationsForUserId(ctx context.Context, in *RecommendationRequestForUserId, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommenderService_GetRecommendationsForUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommenderServiceClient) GetRecommendationsOnViews(ctx context.Context, in *RecommendationRequestOnViews, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommenderService_GetRecommendationsOnViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommenderServiceClient) RecordInteraction(ctx context.Context, in *ProductInteraction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecommenderService_RecordInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommenderServiceServer is the server API for RecommenderService service.
// All implementations must embed UnimplementedRecommenderServiceServer
// for forward compatibility.
type RecommenderServiceServer interface {
	GetRecommendationsForUserId(context.Context, *RecommendationRequestForUserId) (*RecommendationResponse, error)
	GetRecommendationsOnViews(context.Context, *RecommendationRequestOnViews) (*RecommendationResponse, error)
	RecordInteraction(context.Context, *ProductInteraction) (*emptypb.Empty, error)
	mustEmbedUnimplementedRecommenderServiceServer()
}

// UnimplementedRecommenderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommenderServiceServer struct{}

func (UnimplementedRecommenderServiceServer) GetRecommendationsForUserId(context.Context, *RecommendationRequestForUserId) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationsForUserId not implemented")
}
func (UnimplementedRecommenderServiceServer) GetRecommendationsOnViews(context.Context, *RecommendationRequestOnViews) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationsOnViews not implemented")
}
func (UnimplementedRecommenderServiceServer) RecordInteraction(context.Context, *ProductInteraction) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordInteraction not implemented")
}
func (UnimplementedRecommenderServiceServer) mustEmbedUnimplementedRecommenderServiceServer() {}
func (UnimplementedRecommenderServiceServer) testEmbeddedByValue()                            {}

// UnsafeRecommenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommenderServiceServer will
// result in compilation errors.
type UnsafeRecommenderServiceServer interface {
	mustEmbedUnimplementedRecommenderServiceServer()
}

func RegisterRecommenderServiceServer(s grpc.ServiceRegistrar, srv RecommenderServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecommenderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommenderService_ServiceDesc, srv)
}

func _RecommenderService_GetRecommendationsForUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequestForUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderServiceServer).GetRecommendationsForUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderService_GetRecommendationsForUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderServiceServer).GetRecommendationsForUserId(ctx, req.(*RecommendationRequestForUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommenderService_GetRecommendationsOnViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequestOnViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderServiceServer).GetRecommendationsOnViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderService_GetRecommendationsOnViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderServiceServer).GetRecommendationsOnViews(ctx, req.(*RecommendationRequestOnViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommenderService_RecordInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInteraction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommenderServiceServer).RecordInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommenderService_RecordInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommenderServiceServer).RecordInteraction(ctx, req.(*ProductInteraction))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommenderService_ServiceDesc is the grpc.ServiceDesc for RecommenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RecommenderService",
	HandlerType: (*RecommenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendationsForUserId",
			Handler:    _RecommenderService_GetRecommendationsForUserId_Handler,
		},
		{
			MethodName: "GetRecommendationsOnViews",
			Handler:    _RecommenderService_GetRecommendationsOnViews_Handler,
		},
		{
			MethodName: "RecordInteraction",
			Handler:    _RecommenderService_RecordInteraction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommender.proto",
}
