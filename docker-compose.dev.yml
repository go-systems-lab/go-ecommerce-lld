services:
  # ACCOUNT SERVICE - Development with Hot Reload
  account:
    build:
      context: .
      dockerfile: ./account/app.dev.dockerfile
    environment:
      - DATABASE_URL=postgres://postgres:postgres@account_db:5432/ecommerce_account?sslmode=disable
      - PORT=8080
      - SECRET_KEY=my-secret-key
      - ISSUER=ecommerce
    depends_on:
      - account_migrate
    volumes:
      - .:/app:delegated              # Mount entire project
      - go-mod-cache:/go/pkg/mod      # Cache Go modules
      - air-tmp:/app/tmp              # Air build cache
    restart: on-failure

  account_db:
    image: postgres:17.3-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ecommerce_account
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce_account"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  account_migrate:
    image: migrate/migrate
    depends_on:
      account_db:
        condition: service_healthy
    volumes:
      - ./account/migrations:/migrations
    command: ["-path", "/migrations/", "-database", "postgres://postgres:postgres@account_db:5432/ecommerce_account?sslmode=disable", "up"]

  # PRODUCT SERVICE - Development with Hot Reload
  product:
    build:
      context: .
      dockerfile: ./product/app.dev.dockerfile
    environment:
      - ELASTICSEARCH_URL=http://product_db:9200
      - PORT=8080
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - product_db
      - kafka
    volumes:
      - .:/app:delegated              # Mount entire project
      - go-mod-cache:/go/pkg/mod      # Cache Go modules
      - air-tmp:/app/tmp              # Air build cache
    restart: on-failure

  product_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.1
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false

  # ORDER SERVICE - Development with Hot Reload
  order:
    build:
      context: .
      dockerfile: ./order/app.dev.dockerfile
    environment:
      - DATABASE_URL=postgres://postgres:postgres@order_db:5432/ecommerce_order?sslmode=disable
      - ACCOUNT_URL=account:8080
      - PRODUCT_URL=product:8080
      - PORT=8080
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - order_migrate
      - kafka
    volumes:
      - .:/app:delegated              # Mount entire project
      - go-mod-cache:/go/pkg/mod      # Cache Go modules
      - air-tmp:/app/tmp              # Air build cache
    restart: on-failure
  
  order_db:
    image: postgres:17.3-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ecommerce_order
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce_order"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  
  order_migrate:
    image: migrate/migrate
    depends_on:
      order_db:
        condition: service_healthy
    volumes:
      - ./order/migrations:/migrations
    command: ["-path", "/migrations/", "-database", "postgres://postgres:postgres@order_db:5432/ecommerce_order?sslmode=disable", "up"]


  recommender-migrate:
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: ["alembic", "upgrade", "head"]
    depends_on:
      recommender_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@recommender_db:5432/recommender_db?sslmode=disable
    volumes:
      - ./recommender:/app

  recommender-server:
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: ["python", "app/entry/main.py"]
    ports:
      - "50051:50051"
    depends_on:
      - recommender-migrate
      - kafka
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@recommender_db:5432/recommender_db?sslmode=disable
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PRODUCT_API_URL=product:8080
  
  recommender-sync:
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: ["python", "app/entry/sync.py"]
    depends_on:
      - recommender-migrate
      - kafka
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@recommender_db:5432/recommender_db?sslmode=disable
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PRODUCT_API_URL=product:8080


  # RECOMMENDER SERVICE DATABASE
  recommender_db:
    image: postgres:17.3-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=recommender_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d recommender_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  zookeeper:
    restart: always
    container_name: kafka-zookeeper
    image: bitnami/zookeeper:3.6
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.6
    depends_on:
      - zookeeper
    volumes:
      - "kafka-volume:/bitnami"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    restart: unless-stopped

  # GRAPHQL API GATEWAY - Development with Hot Reload
  graphql:
    build:
      context: .
      dockerfile: ./graphql/app.dev.dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - account
      - product
      - order
    environment:
      - ACCOUNT_SERVICE_URL=account:8080
      - PRODUCT_SERVICE_URL=product:8080
      - ORDER_SERVICE_URL=order:8080
      - RECOMMENDER_SERVICE_URL=recommender-server:50051
      - PORT=8080
      - SECRET_KEY=my-secret-key
      - ISSUER=ecommerce
    volumes:
      - .:/app:delegated              # Mount entire project
      - go-mod-cache:/go/pkg/mod      # Cache Go modules
      - air-tmp:/app/tmp              # Air build cache
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

volumes:
  go-mod-cache:
  air-tmp: 
  zookeeper-volume:
  kafka-volume: